Linuxはオープンソースということもあり様々なディストリビューションに分かれています。主要なディストリビューションとして「RedHat系」「Debian系」「Slackware系」などがあります。

Ubuntu とは「誰にでも使いやすいOS」をコンセプトとして開発されたDebian系Linux OS です。Linuxと聞くとコマンドを使用したCUI操作をイメージしますが、UbuntuではWindowsやMac OSのようなマウスによる操作(GUI)が行えたりと、ユーザーフレンドリーな面を持っています。

UbuntuはLiveDVDという形で配布されており、DVDにイメージファイルを焼きつけるかLiveUSBを使用すると、DVDもしくはUSBメモリーから手軽にOSを起動できます。

UTMとはQemuをベースに作成されている仮想環境を作るmacOSとiOS向けに作成されているオープンソースのソフトウェアです。

このUTMはMac App Storeで配信されている有料版とGitHubもしくは公式サイトで配信されている無料版があります。両者の異なる点としては、有料版を購入すると自動更新がされるくらいで機能面での違いはほとんどありません。まずは無料で使用をしてみて、気に入ったら購入するのをおすすめします。



▫️ストレージデバイスとはなんですか？

ストレージデバイスとは、データを永続的にまたは一時的に保存するためのデバイスやメディアを指します。ストレージデバイスは、情報をデジタル形式で保持し、後で取り出して利用できるようにします。

以下は、一般的なストレージデバイスの例です：

ハードディスクドライブ (HDD): 磁気ディスク上にデータを保存するデバイス。長い間、コンピュータの主要なストレージデバイスとして使用されてきました。

ソリッドステートドライブ (SSD): フラッシュメモリを使用してデータを保存するデバイス。HDDに比べて高速で、動作部分がないため耐久性も高い。

USBフラッシュドライブ: 小型のポータブルフラッシュメモリデバイス。USBインターフェースを介してコンピュータに接続します。

メモリカード: カメラやスマートフォンなどのデジタルデバイスで使用される小型のフラッシュメモリデバイス。

光学ディスク: CD、DVD、Blu-rayなどのディスク。レーザーを使用してデータを読み書きします。

テープドライブ: 磁気テープを使用してデータを保存するデバイス。主にバックアップやアーカイブの目的で使用されます。

ネットワークアタッチトストレージ (NAS): ネットワーク経由で複数のデバイスからアクセスできるストレージデバイス。

これらのデバイスは、データの保存、取得、移動に使用されます。適切なストレージデバイスを選択することで、パフォーマンス、耐久性、コスト、容量などの要件を満たすことができます。



▫️CPUとはなんですか？

CPU（Central Processing Unit）は、コンピュータの中心的な処理装置であり、その「ブレイン」とも言える部分です。CPUは、プログラムの命令を解読し実行する役割を持っており、コンピュータの全体的な性能や速度に大きく影響を与えます。

以下は、CPUに関する基本的な情報と機能を示しています：

命令の実行: CPUは、オペレーティングシステムやアプリケーションからの命令を受け取り、それらを実行します。これには、算術計算、データの移動、ロジック操作などが含まれます。

クロック速度: CPUの速度は、一般的にクロック速度（またはクロックレート）で測定されます。これは、CPUが1秒間に何回命令を処理できるかを示すもので、単位はヘルツ（Hz）です。現代のCPUはギガヘルツ（GHz）のレンジで動作します。

コア: 近年のCPUは、複数の「コア」を持つことが一般的になっています。マルチコアCPUは、複数のタスクを同時に処理する能力があり、マルチタスキング性能やアプリケーションのパフォーマンスが向上します。

キャッシュ: CPUには、高速なキャッシュメモリが組み込まれています。このキャッシュは、頻繁にアクセスされるデータや命令を一時的に保存し、CPUがメインメモリよりも高速にこれらの情報にアクセスできるようにします。

アーキテクチャ: CPUアーキテクチャは、CPUがどのように設計され、命令をどのように処理するかを定義します。例としては、x86、ARMなどのアーキテクチャがあります。

製造プロセス: CPUの製造プロセスは、トランジスタのサイズや密度を示すもので、ナノメートル（nm）単位で測定されます。この数値が小さいほど、トランジスタは密に配置され、効率的な動作や低消費電力が期待されます。

CPUは、コンピュータやスマートフォン、タブレット、サーバー、組み込みデバイスなど、様々なデバイスにおいて中核的な役割を果たします。



▫️以下のコマンドは何を実行していますか？

$ strace -o hello.log ./hello


straceは、Linuxや多くのUNIX系オペレーティングシステムで使用される監視ツールの一つです。特定のプロセスが行っているシステムコールをトレース(追跡)するために使用されます。

与えられたコマンドを詳細に解析すると以下の通りです：

strace: これはstraceツールを呼び出すコマンドです。

-o hello.log: このオプションは、straceの出力をファイルhello.logにリダイレクトするためのものです。このファイルには、トレースされたすべてのシステムコールが記録されます。

./hello: これはstraceによってトレースされる実行ファイルまたはコマンドです。この例では、カレントディレクトリにあるhelloという名前の実行可能ファイルを実行します。

簡単に言えば、このコマンドは./helloプログラムが行うシステムコールをトレースし、その結果をhello.logというファイルに保存します。このようなトレースは、プログラムのデバッグやパフォーマンス分析など、さまざまな目的で役立ちます。



▫️親プロセスとはなんですか？

親プロセスとは、オペレーティングシステム上で動作するプロセスの中で、別のプロセス（子プロセス）を生成（forkやspawnなど）したプロセスのことを指します。

具体的には以下のような動作が行われます：

あるプロセス（これを親プロセスと呼ぶ）が新しいプロセスを生成する操作を行います。この操作は、多くのオペレーティングシステムで「fork」と呼ばれるシステムコールを用いて行われます。

生成された新しいプロセスは子プロセスとして動作を開始します。

親プロセスは、自らのタスクを継続するか、あるいは子プロセスの終了を待つなどの操作を行います。

子プロセスは、通常、親プロセスからの一部のリソースや環境設定を継承します。しかし、親と子は独立したプロセスとして動作し、それぞれが異なるプロセスIDを持ちます。

オペレーティングシステムのプロセス管理の観点から、プロセスの生成と終了は非常に基本的な操作であり、親プロセスと子プロセスという関係は、これらのプロセス間の階層や依存関係を理解するための基本的な概念となっています。



▫️ライブラリ
多くのプログラミング言語では、複数のプログラムに共通する処理をライブラリとしてまとめる機能がある。
これによって、プログラマたちは先人たちが作ってきた大量のライブラリの中から好きなものを選んで使うことができる。



▫️以下のコマンドは何をやっていますでしょうか？
$ ldd /bin/echo

lddコマンドは、指定された実行ファイルが依存している共有ライブラリ（またはダイナミックリンクライブラリ）を表示するためのツールです。

上記のコマンドldd /bin/echoは、/bin/echoという実行ファイルが依存している共有ライブラリをリストアップしています。

表示されている結果を詳しく解説します：

linux-vdso.so.1：これはVirtual Dynamic Shared Object (vDSO)と呼ばれるもので、カーネルが提供するいくつかのシステムコールを高速に実行するためのメカニズムです。vDSOは実際のファイルとしては存在せず、カーネルによってプロセスのアドレス空間にマップされる仮想的なライブラリです。

libc.so.6：これはGNU Cライブラリ（glibc）の主要な共有ライブラリです。多くの基本的なシステムコールや標準C関数がこのライブラリに含まれています。実際のライブラリの位置は/lib/aarch64-linux-gnu/libc.so.6であり、この情報が=>の後に表示されています。

/lib/ld-linux-aarch64.so.1：これは動的リンカー（または動的リンクエディタ）であり、プログラムの実行時に必要な共有ライブラリを適切なアドレス空間にロードする役割を果たします。この動的リンカーのパスは特定のアーキテクチャ（この場合はaarch64）に固有です。

簡単に言うと、このコマンドの出力は/bin/echoプログラムが正常に実行されるために必要な共有ライブラリとその場所を示しています


